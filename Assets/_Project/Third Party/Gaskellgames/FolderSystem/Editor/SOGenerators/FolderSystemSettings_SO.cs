#if UNITY_EDITOR
#if GASKELLGAMES
using System.Collections.Generic;
using Gaskellgames.EditorOnly;
using UnityEditor;
using UnityEngine;

namespace Gaskellgames.FolderSystem.EditorOnly
{
    /// <summary>
    /// Code created by Gaskellgames
    /// </summary>

    [CreateAssetMenu(fileName = "FolderIconSettings", menuName = "Gaskellgames/Folder System/FolderIconSettings")]
    public class FolderSystemSettings_SO : ScriptableObject
    {
        #region Variables

        internal enum SelectedState
        {
            Off,
            AutoGenerated,
            UserGenerated
        }
        
        [SerializeField, ReadOnly]
        private SelectedState projectFolderState = SelectedState.AutoGenerated;
        
        internal SelectedState ProjectFolderState
        {
            get => projectFolderState;
            set
            {
                projectFolderState = value;
                CreateFolderIconDictionary();
            }
        }

        [SerializeField]
        internal bool defaultFolderIcons = false;

        [SerializeField, ReadOnly]
        private SerializedDictionary<string, Texture> userGeneratedLinks;
        
        internal Dictionary<string, Texture> folderIconDictionary { get; private set; }

        #endregion
        
        //----------------------------------------------------------------------------------------------------
        
        #region Internal Functions
        
        private static FolderSystemSettings_SO instance;
        
        internal static FolderSystemSettings_SO Instance
        {
            get
            {
                if (instance == null)
                {
                    // Editor Default Resources
                    List<FolderSystemSettings_SO> allInstances = EditorExtensions.GetAllAssetsByType<FolderSystemSettings_SO>();

                    if (allInstances.Count == 0)
                    {
                        // create a new instance
                        instance = ScriptableObject.CreateInstance<FolderSystemSettings_SO>();
                        
                        // and save it to disk
                        string properPath = System.IO.Path.Combine(UnityEngine.Application.dataPath, "Editor Default Resources");
                        if (!System.IO.Directory.Exists(properPath))
                        {
                            AssetDatabase.CreateFolder("Assets", "Editor Default Resources");
                        }
                        string fullPath = System.IO.Path.Combine("Assets", "Editor Default Resources", "FolderSystemSettings.asset");
                        AssetDatabase.CreateAsset(instance, fullPath);
                    }
                    else if (allInstances.Count == 1)
                    {
                        instance = allInstances[0];
                    }
                    else
                    {
                        instance = allInstances[0];
                        for (int i = allInstances.Count - 1; i >= 1; i--)
                        {
                            string path = AssetDatabase.GetAssetPath(allInstances[i]);
                            AssetDatabase.DeleteAsset(path);
                        }
                    }
                }
                
                return instance;
            }
        }

        internal void Initialise()
        {
            ProjectFolderIcons.AutoGenerateIconDictionary();
            CleanUserGeneratedLinks();
            CreateFolderIconDictionary();
        }

        internal void ResetUserGeneratedLinks()
        {
            ProjectFolderIcons.AutoGenerateIconDictionary();
            userGeneratedLinks = new SerializedDictionary<string, Texture>(ProjectFolderIcons.autoGeneratedIconDictionary);
            EditorUtility.SetDirty(this);
        }

        internal void CleanUserGeneratedLinks()
        {
            userGeneratedLinks.Initialise();
            userGeneratedLinks.ClearInvalidEntries();
            EditorUtility.SetDirty(this);
        }

        internal bool TryAddToUserGeneratedLinks(string key, Texture value)
        {
            if (!userGeneratedLinks.TryAdd(key, value)) { return false; }
            EditorUtility.SetDirty(this);
            return true;
        }

        internal bool RemoveFromUserGeneratedLinks(string key)
        {
            if (!userGeneratedLinks.Remove(key)) { return false; }
            EditorUtility.SetDirty(this);
            return true;
        }

        internal bool TryGetKeysForValue(Texture image, out List<string> keys)
        {
            if (!userGeneratedLinks.TryGetKeysForValue(image, out keys)) { return false; }
            EditorUtility.SetDirty(this);
            return true;
        }
        
        internal void CreateFolderIconDictionary()
        {
            folderIconDictionary = new Dictionary<string, Texture>();
            switch (projectFolderState)
            {
                case SelectedState.AutoGenerated:
                    ProjectFolderIcons.AutoGenerateIconDictionary();
                    folderIconDictionary = ProjectFolderIcons.autoGeneratedIconDictionary;
                    break;
                
                case SelectedState.UserGenerated:
                    folderIconDictionary = userGeneratedLinks.ToDictionary();
                    break;
                
                case SelectedState.Off:
                default:
                    break;
            }
        }

        #endregion
        
    } // class end
}
#endif
#endif